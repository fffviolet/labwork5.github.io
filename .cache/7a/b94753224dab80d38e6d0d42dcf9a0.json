{"id":"node_modules/date-fns/isValid.js","dependencies":[{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\package.json","includedInParent":true,"mtime":1732207155873},{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1732207154549},{"name":"./isDate.js","loc":{"line":1,"column":23},"parent":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\isValid.js","resolved":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\isDate.js"},{"name":"./toDate.js","loc":{"line":2,"column":23},"parent":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\isValid.js","resolved":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\toDate.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.isValid = isValid;\n\nvar _isDate = require(\"./isDate.js\");\n\nvar _toDate = require(\"./toDate.js\");\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid(date) {\n  return !(!(0, _isDate.isDate)(date) && typeof date !== \"number\" || isNaN(+(0, _toDate.toDate)(date)));\n} // Fallback for modularized imports:\n\n\nvar _default = exports.default = isValid;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":2,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":4,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":7}},{"name":"isValid","generated":{"line":44,"column":9},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":16}},{"generated":{"line":44,"column":16},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":7}},{"name":"date","generated":{"line":44,"column":17},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":24}},{"generated":{"line":44,"column":21},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":7}},{"generated":{"line":44,"column":23},"source":"node_modules/date-fns/isValid.js","original":{"line":35,"column":30}},{"generated":{"line":45,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":2}},{"generated":{"line":45,"column":9},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":9}},{"generated":{"line":45,"column":11},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":12}},{"generated":{"line":45,"column":12},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":13}},{"name":"date","generated":{"line":45,"column":32},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":20}},{"generated":{"line":45,"column":36},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":13}},{"generated":{"line":45,"column":37},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":12}},{"generated":{"line":45,"column":41},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":29}},{"name":"date","generated":{"line":45,"column":48},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":36}},{"generated":{"line":45,"column":52},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":29}},{"generated":{"line":45,"column":57},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":45}},{"generated":{"line":45,"column":65},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":11}},{"name":"isNaN","generated":{"line":45,"column":69},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":58}},{"generated":{"line":45,"column":74},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":63}},{"generated":{"line":45,"column":75},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":64}},{"generated":{"line":45,"column":76},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":65}},{"name":"date","generated":{"line":45,"column":96},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":72}},{"generated":{"line":45,"column":100},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":65}},{"generated":{"line":45,"column":101},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":63}},{"generated":{"line":45,"column":102},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":9}},{"generated":{"line":45,"column":103},"source":"node_modules/date-fns/isValid.js","original":{"line":36,"column":2}},{"generated":{"line":46,"column":0},"source":"node_modules/date-fns/isValid.js","original":{"line":37,"column":1}},{"generated":{"line":46,"column":2},"source":"node_modules/date-fns/isValid.js","original":{"line":39,"column":0}},{"name":"isValid","generated":{"line":49,"column":33},"source":"node_modules/date-fns/isValid.js","original":{"line":40,"column":15}}],"sources":{"node_modules/date-fns/isValid.js":"import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n"},"lineCount":null}},"error":null,"hash":"a28145bdff3d1615d67febdb57149b6d","cacheData":{"env":{}}}