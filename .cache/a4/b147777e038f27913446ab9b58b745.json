{"id":"node_modules/date-fns/constructFrom.js","dependencies":[{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\package.json","includedInParent":true,"mtime":1732207155873},{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1732207154549},{"name":"./constants.js","loc":{"line":1,"column":36},"parent":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\constructFrom.js","resolved":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constructFrom = constructFrom;\nexports.default = void 0;\n\nvar _constants = require(\"./constants.js\");\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n  if (date && typeof date === \"object\" && _constants.constructFromSymbol in date) return date[_constants.constructFromSymbol](value);\n  if (date instanceof Date) return new date.constructor(value);\n  return new Date(value);\n} // Fallback for modularized imports:\n\n\nvar _default = exports.default = constructFrom;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":3,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":7}},{"name":"constructFrom","generated":{"line":46,"column":9},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":16}},{"generated":{"line":46,"column":22},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":7}},{"name":"date","generated":{"line":46,"column":23},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":30}},{"generated":{"line":46,"column":27},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":7}},{"name":"value","generated":{"line":46,"column":29},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":36}},{"generated":{"line":46,"column":34},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":7}},{"generated":{"line":46,"column":36},"source":"node_modules/date-fns/constructFrom.js","original":{"line":38,"column":43}},{"generated":{"line":47,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":2}},{"generated":{"line":47,"column":6},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":6}},{"name":"date","generated":{"line":47,"column":13},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":13}},{"generated":{"line":47,"column":17},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":6}},{"generated":{"line":47,"column":22},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":22}},{"generated":{"line":47,"column":32},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":2}},{"generated":{"line":47,"column":34},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":34}},{"name":"date","generated":{"line":47,"column":41},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":41}},{"generated":{"line":47,"column":45},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":45}},{"name":"value","generated":{"line":47,"column":46},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":46}},{"generated":{"line":47,"column":51},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":45}},{"generated":{"line":47,"column":52},"source":"node_modules/date-fns/constructFrom.js","original":{"line":39,"column":34}},{"generated":{"line":48,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":2}},{"name":"date","generated":{"line":48,"column":6},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":6}},{"generated":{"line":48,"column":10},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":10}},{"generated":{"line":48,"column":14},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":14}},{"name":"date","generated":{"line":48,"column":21},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":21}},{"generated":{"line":48,"column":25},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":14}},{"generated":{"line":48,"column":30},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":30}},{"generated":{"line":48,"column":38},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":6}},{"name":"constructFromSymbol","generated":{"line":48,"column":42},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":42}},{"name":"date","generated":{"line":48,"column":76},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":65}},{"generated":{"line":48,"column":80},"source":"node_modules/date-fns/constructFrom.js","original":{"line":41,"column":2}},{"generated":{"line":48,"column":82},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":4}},{"name":"date","generated":{"line":48,"column":89},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":11}},{"generated":{"line":48,"column":93},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":15}},{"name":"constructFromSymbol","generated":{"line":48,"column":94},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":16}},{"generated":{"line":48,"column":124},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":15}},{"generated":{"line":48,"column":125},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":11}},{"name":"value","generated":{"line":48,"column":126},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":37}},{"generated":{"line":48,"column":131},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":11}},{"generated":{"line":48,"column":132},"source":"node_modules/date-fns/constructFrom.js","original":{"line":42,"column":4}},{"generated":{"line":49,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":2}},{"name":"date","generated":{"line":49,"column":6},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":6}},{"generated":{"line":49,"column":10},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":10}},{"name":"Date","generated":{"line":49,"column":22},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":22}},{"generated":{"line":49,"column":26},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":2}},{"generated":{"line":49,"column":28},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":28}},{"generated":{"line":49,"column":35},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":35}},{"name":"date","generated":{"line":49,"column":39},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":39}},{"generated":{"line":49,"column":43},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":43}},{"name":"constructor","generated":{"line":49,"column":44},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":44}},{"generated":{"line":49,"column":55},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":35}},{"name":"value","generated":{"line":49,"column":56},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":56}},{"generated":{"line":49,"column":61},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":35}},{"generated":{"line":49,"column":62},"source":"node_modules/date-fns/constructFrom.js","original":{"line":44,"column":28}},{"generated":{"line":50,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":2}},{"generated":{"line":50,"column":9},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":9}},{"name":"Date","generated":{"line":50,"column":13},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":13}},{"generated":{"line":50,"column":17},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":9}},{"name":"value","generated":{"line":50,"column":18},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":18}},{"generated":{"line":50,"column":23},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":9}},{"generated":{"line":50,"column":24},"source":"node_modules/date-fns/constructFrom.js","original":{"line":46,"column":2}},{"generated":{"line":51,"column":0},"source":"node_modules/date-fns/constructFrom.js","original":{"line":47,"column":1}},{"generated":{"line":51,"column":2},"source":"node_modules/date-fns/constructFrom.js","original":{"line":49,"column":0}},{"name":"constructFrom","generated":{"line":54,"column":33},"source":"node_modules/date-fns/constructFrom.js","original":{"line":50,"column":15}}],"sources":{"node_modules/date-fns/constructFrom.js":"import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n"},"lineCount":null}},"error":null,"hash":"9ce4487938a0b411d75e1a1dff366c3c","cacheData":{"env":{}}}