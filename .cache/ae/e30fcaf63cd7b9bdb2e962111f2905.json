{"id":"node_modules/date-fns/toDate.js","dependencies":[{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\package.json","includedInParent":true,"mtime":1732207155873},{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1732207154549},{"name":"./constructFrom.js","loc":{"line":1,"column":30},"parent":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\toDate.js","resolved":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\constructFrom.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.toDate = toDate;\n\nvar _constructFrom = require(\"./constructFrom.js\");\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return (0, _constructFrom.constructFrom)(context || argument, argument);\n} // Fallback for modularized imports:\n\n\nvar _default = exports.default = toDate;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":3,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":7}},{"name":"toDate","generated":{"line":49,"column":9},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":16}},{"generated":{"line":49,"column":15},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":7}},{"name":"argument","generated":{"line":49,"column":16},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":23}},{"generated":{"line":49,"column":24},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":7}},{"name":"context","generated":{"line":49,"column":26},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":33}},{"generated":{"line":49,"column":33},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":7}},{"generated":{"line":49,"column":35},"source":"node_modules/date-fns/toDate.js","original":{"line":41,"column":42}},{"generated":{"line":50,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":42,"column":2}},{"generated":{"line":51,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":2}},{"generated":{"line":51,"column":9},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":9}},{"name":"context","generated":{"line":51,"column":43},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":23}},{"generated":{"line":51,"column":50},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":30}},{"name":"argument","generated":{"line":51,"column":54},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":34}},{"generated":{"line":51,"column":62},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":9}},{"name":"argument","generated":{"line":51,"column":64},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":44}},{"generated":{"line":51,"column":72},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":9}},{"generated":{"line":51,"column":73},"source":"node_modules/date-fns/toDate.js","original":{"line":43,"column":2}},{"generated":{"line":52,"column":0},"source":"node_modules/date-fns/toDate.js","original":{"line":44,"column":1}},{"generated":{"line":52,"column":2},"source":"node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"name":"toDate","generated":{"line":55,"column":33},"source":"node_modules/date-fns/toDate.js","original":{"line":47,"column":15}}],"sources":{"node_modules/date-fns/toDate.js":"import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"},"lineCount":null}},"error":null,"hash":"ed6af19bb18ab761ebe2aa8b3bb6b8b5","cacheData":{"env":{}}}