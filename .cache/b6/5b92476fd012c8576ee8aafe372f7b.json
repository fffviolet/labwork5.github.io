{"id":"node_modules/date-fns/constructNow.js","dependencies":[{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\package.json","includedInParent":true,"mtime":1732207155873},{"name":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1732207154549},{"name":"./constructFrom.js","loc":{"line":1,"column":30},"parent":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\constructNow.js","resolved":"D:\\wulawula\\study\\three shang\\web网页设计\\实验\\5\\parcel-experiment\\node_modules\\date-fns\\constructFrom.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constructNow = constructNow;\nexports.default = void 0;\n\nvar _constructFrom = require(\"./constructFrom.js\");\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nfunction constructNow(date) {\n  return (0, _constructFrom.constructFrom)(date, Date.now());\n} // Fallback for modularized imports:\n\n\nvar _default = exports.default = constructNow;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"node_modules/date-fns/constructNow.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/date-fns/constructNow.js","original":{"line":3,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":7}},{"name":"constructNow","generated":{"line":39,"column":9},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":16}},{"generated":{"line":39,"column":21},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":7}},{"name":"date","generated":{"line":39,"column":22},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":29}},{"generated":{"line":39,"column":26},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":7}},{"generated":{"line":39,"column":28},"source":"node_modules/date-fns/constructNow.js","original":{"line":31,"column":35}},{"generated":{"line":40,"column":0},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":2}},{"generated":{"line":40,"column":9},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":9}},{"name":"date","generated":{"line":40,"column":43},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":23}},{"generated":{"line":40,"column":47},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":9}},{"name":"Date","generated":{"line":40,"column":49},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":29}},{"generated":{"line":40,"column":53},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":33}},{"name":"now","generated":{"line":40,"column":54},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":34}},{"generated":{"line":40,"column":57},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":29}},{"generated":{"line":40,"column":59},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":9}},{"generated":{"line":40,"column":60},"source":"node_modules/date-fns/constructNow.js","original":{"line":32,"column":2}},{"generated":{"line":41,"column":0},"source":"node_modules/date-fns/constructNow.js","original":{"line":33,"column":1}},{"generated":{"line":41,"column":2},"source":"node_modules/date-fns/constructNow.js","original":{"line":35,"column":0}},{"name":"constructNow","generated":{"line":44,"column":33},"source":"node_modules/date-fns/constructNow.js","original":{"line":36,"column":15}}],"sources":{"node_modules/date-fns/constructNow.js":"import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n"},"lineCount":null}},"error":null,"hash":"52b0ef4fbde12278d27eeffdc3353149","cacheData":{"env":{}}}